Estructura del proyecto Panel de Control Pastelería
===================================================

Este proyecto está dividido en backend (ASP.NET) y frontend (React + TypeScript + Tailwind), cada uno con su propia estructura y tecnologías, para mantener el código organizado, escalable y fácil de mantener.

1. BACKEND (ASP.NET Web API)
-----------------------------
- Ubicación: Proyecto separado en ASP.NET Core
- URL: https://localhost:5001
- Endpoints disponibles: /api/LogIn, /api/Tortas, /api/Medidas, /api/Ingredientes, /api/CostosExtra
- Base de datos: SQL Server con Entity Framework

CamilasBakery es un sistema web interno para la gestión administrativa, de producción y control de costos de una pastelería, desarrollado en .NET y React.

2. FRONTEND (React + TypeScript + Tailwind)
--------------------------------------------
ESTRUCTURA PRINCIPAL:
- package.json: Dependencias y scripts (React, TypeScript, Vite, Tailwind, Lucide Icons)
- tsconfig.json: Configuración TypeScript para tipado fuerte
- vite.config.ts: Configuración del bundler Vite (dev server, build, proxy API)
- tailwind.config.js: Configuración de estilos con Tailwind CSS v4
- index.html: Punto de montaje de la aplicación React

CARPETAS PRINCIPALES:

📁 src/
├── 📁 api/ - Comunicación con backend
│   ├── auth.ts - Login/logout, manejo de sesiones
│   ├── tortas.ts - CRUD de tortas
│   ├── medidas.ts - CRUD de medidas
│   ├── ingredientes.ts - CRUD de ingredientes
│   ├── costoExtra.ts - CRUD de costos extra
│   └── http.ts - Configuración base de axios
│
├── 📁 app/ - Configuración principal
│   ├── App.tsx - Componente raíz con routing
│   ├── DashboardLayout.tsx - Layout principal con sidebar
│   └── routes.tsx - Configuración de rutas
│
├── 📁 components/ - Componentes reutilizables
│   ├── ProtectedRoute.tsx - Protección de rutas privadas
│   └── charts/ - Componentes de gráficos
│
├── 📁 hooks/ - React hooks personalizados
│   ├── useAuth.ts - Hook de autenticación
│   ├── useTortas.ts - Hook para datos de tortas
│   ├── useMedidas.ts - Hook para datos de medidas
│   └── useIngredientes.ts - Hook para datos de ingredientes
│
├── 📁 pages/ - Páginas principales
│   ├── Login.tsx - Página de inicio de sesión
│   ├── Dashboard.tsx - Dashboard principal con métricas
│   ├── Tortas.tsx - Gestión de tortas
│   ├── Medidas.tsx - Gestión de medidas (drill-down)
│   ├── Ingredientes.tsx - Gestión de ingredientes
│   ├── CostoExtra.tsx - Gestión de costos extra
│   └── Reportes.tsx - Reportes y estadísticas
│
└── 📁 types/ - Definiciones TypeScript
    ├── auth.ts - Tipos de autenticación
    ├── tortas.ts - Tipos de tortas
    ├── medidas.ts - Tipos de medidas
    └── ingredientes.ts - Tipos de ingredientes

📁 public/assets/ - Recursos estáticos
└── tortas/ - Imágenes de tortas (alfacookie.jpg, brownie.jpg, etc.)

TECNOLOGÍAS IMPLEMENTADAS:
- React 18 con TypeScript para tipado fuerte
- Tailwind CSS v4 para estilos modernos y responsive
- Lucide React para iconos profesionales
- React Router para navegación
- Axios para peticiones HTTP
- Vite para desarrollo rápido y build optimizado

CARACTERÍSTICAS DEL DASHBOARD:
- Sistema de autenticación completo (login/logout)
- Layout responsive con sidebar y navegación
- Colores personalizados (naranja, marrón, negro)
- Cards de métricas con animaciones hover
- Navegación drill-down: Tortas → Medidas → Detalles


3. FUNCIONALIDADES IMPLEMENTADAS
================================

✅ COMPLETADO:
- Sistema de autenticación (login/logout) con localStorage
- Dashboard principal con métricas y cards animadas
- Layout responsive con sidebar navegacional
- Integración frontend-backend vía API REST
- Tipado fuerte con TypeScript en toda la aplicación
- Estilos profesionales con Tailwind CSS v4
- Estructura modular y escalable del código

🔄 EN DESARROLLO:
- Páginas de gestión (Tortas, Medidas, Ingredientes, Costos Extra)
- Navegación drill-down: Tortas → Medidas → Detalles
- Integración con endpoints del backend
- Sistema de hooks para manejo de estado

📋 PENDIENTE:
- Apartado de estadísticas y reportes
- Indicadores visuales (semaforización): Alta/Media/Baja - Verde/Amarillo/Rojo
- Búsqueda de ingredientes y tortas
- Análisis de ingredientes más utilizados
- Gráficos y visualizaciones de datos

4. SCRIPTS DISPONIBLES
======================
- `npm run dev` - Ejecuta solo el frontend en modo desarrollo
- `npm run dev:full` - Ejecuta backend + frontend simultáneamente  
- `npm run build` - Construye la aplicación para producción
- `npm run preview` - Previsualiza la build de producción

5. CONFIGURACIÓN DE DESARROLLO
==============================
- Frontend: http://localhost:3000 (Vite)
- Backend: https://localhost:5001 (ASP.NET)
- Credenciales test: admin/1234
- Base de datos: SQL Server con Entity Framework
